一.
（1）Java中的异常（Exception）又称为例外，是一个在程序执行期间发生的事件，它中断正在执行的程序的正常指令流。异常是发生错误          时被抛出的一个通知，为了能够及时有效地处理程序中的运行错误，必须使用异常类。 代码可能在编译时没有错误，可是运行时会出        现异常。异常类 Exception 又分为运行时异常和非运行时异常，这两种异常有很大的区别，也称为不检查异常（Unchecked         Exception）和检查异常（Checked Exception）。在编程中，能捕捉到的是前者即通过throw捕捉的是checked exception，就是一        般异常。而uncheckded exception是不能预料到的，如运行时异常。 
（2）生成异常对象，并把它提交给运行时系统的过程称为拋出（throw）异常。抛出异常是方法中声明该方法可能出现的异常状态，利用            throws关键字。
        捕获异常是在已知方法中会产生，或不完全确定，但是可能会产生异常的情况下，对能产生异常的代码部分进行的try catch处理。
        运行时系统在方法的调用栈中查找，直到找到能够处理该类型异常的对象，这一个过程称为捕获（catch）异常。
（3）throw 就是抛出一个异常，并获取这个异常的引用，这个异常会被抛到外部的环境，由外部环境进行处理
        throws并不是抛出一个实际的Exception而是一个异常声明，它声明这个方法可能会抛出一个异常，因为是可能，所以在没有异常的情        况下也是可以用throws的，而throws本身的作用也是用来提高程序的健壮性，反过来，如果这个方法的的确确的有一个异常，那么编        译器会强制让你加上throws这个异常声明。通常throws是写在参数列表的后面，这样就表明这个方法有可能会抛出一个异常
        throw与throws的比较：
        1、throws出现在方法函数头，而throw出现在函数体。
        2、throws表示出现异常的一种可能性，并不一定会发生这些异常，throw则是抛出了异常，执行throw则一定抛出了某种异常对象。
        3、两者都是消极处理异常的方式（这里的消极并不是说这种方式不好），只是抛出或者可能抛出异常，但不会由函数去处理异常，真             正的处理异常由函数的上层调用处理。
（4）在try-catch-finally结构中，因为要测试catch ，所以try代码块中必须抛出异常，如果有异常，执行顺序为try->catch->finally,如果try       未触发异常，则执行顺序为try-finally。当try块的代码没有异常抛出的时候，try块执行完毕之后，程序会顺序执行finally块的代码。
       当有异常抛出的时候，后续的一个或者多个catch的定义中，应该有一个最先匹配到的异常来处理捕获到的异常，然后程序在进入finally       代码块。如果程序没有定义catch块或者catch块代码不能捕获到程序的异常，如果有finally代码块，程序也是先执行finally代码块，然       后再异常退出流程。如果finally代码块后面还有代码，则这些代码不会被执行。
